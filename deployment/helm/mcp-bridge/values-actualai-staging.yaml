# Staging environment values for actualai-staging EKS cluster
# Environment: actualai-staging
# Cluster: arn:aws:eks:us-west-2:324037314017:cluster/actualai-staging

global:
  imageRegistry: ""
  imagePullSecrets:
    - name: ghcr-secret

# Container images
image:
  repository: ghcr.io/actual-software/mcp-bridge
  pullPolicy: IfNotPresent
  tag: "v1.0.0-rc2"

# Gateway configuration
gateway:
  enabled: true

  image:
    repository: ghcr.io/actual-software/mcp-bridge-gateway
    tag: "1.0.0-rc2"

  replicaCount: 2

  # Service configuration
  service:
    type: LoadBalancer
    port: 8443
    targetPort: 8443
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
      service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
      service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"

  # Ingress configuration
  ingress:
    enabled: false

  # Resource limits for staging
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

  # Auto-scaling
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

  # Pod disruption budget
  podDisruptionBudget:
    enabled: true
    minAvailable: 1

  # Environment variables
  env:
    MCP_ENV: staging
    MCP_LOG_LEVEL: debug
    MCP_GATEWAY_PORT: "8443"
    MCP_METRICS_PORT: "9090"

  # Configuration
  config:
    create: true
    data: |
      server:
        port: 8443
        tls:
          enabled: true
          cert_file: /etc/tls/tls.crt
          key_file: /etc/tls/tls.key
        cors:
          allowed_origins: ["*"]
          allowed_methods: ["GET", "POST", "OPTIONS"]
          allowed_headers: ["Authorization", "Content-Type"]
        rate_limiting:
          enabled: true
          requests_per_minute: 500
        frontends:
          - name: websocket
            protocol: websocket
            enabled: true
            config:
              path: /ws

      auth:
        jwt:
          secret_key_env: JWT_SECRET_KEY
          expiry: 24h
        bearer:
          enabled: true

      sessions:
        provider: redis
        ttl: 3600
        redis:
          url: redis://mcp-gateway-redis-master:6379
          password: "mcp-redis-staging-2025"
          db: 0
          pool_size: 10
          max_retries: 3

      service_discovery:
        provider: static
        static:
          endpoints:
            coding-assistant:
              - url: http://serena-mcp.mcp.svc.cluster.local:8080/mcp
                labels:
                  protocol: http
                  type: mcp-server
                health:
                  path: /mcp
                  method: GET

      monitoring:
        metrics:
          enabled: true
          port: 9090
          path: /metrics
        health:
          enabled: true
          path: /health

      logging:
        level: debug
        format: json
        correlation_id: true

# Router configuration (disabled for gateway-only deployment)
router:
  enabled: false

# Redis configuration
redis:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/redis
    tag: latest
  architecture: standalone
  auth:
    enabled: true
    password: "mcp-redis-staging-2025"
  master:
    persistence:
      enabled: true
      size: 8Gi
      storageClass: gp3
    resources:
      limits:
        cpu: 250m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi

# Prometheus configuration (use existing cluster prometheus)
prometheus:
  enabled: false

# Grafana configuration (use existing cluster grafana)
grafana:
  enabled: false

# Network policies
networkPolicy:
  enabled: true
  ingress:
    enabled: true
  egress:
    enabled: true

# TLS configuration
tls:
  enabled: true
  secretName: mcp-gateway-tls
  create: false  # Use AWS Certificate Manager or provide certs

# Secrets management
secrets:
  create: true
  # Generate these before deployment
  jwtSecretKey: ""  # Will be set via --set-string
  redisPassword: ""  # Will be set via --set-string

# Pod monitoring
podMonitor:
  enabled: true
  namespace: ""
  interval: 30s
  scrapeTimeout: 10s

# Service monitor for Prometheus
serviceMonitor:
  enabled: true
  namespace: ""
  interval: 30s
  scrapeTimeout: 10s
  labels:
    prometheus: kube-prometheus
