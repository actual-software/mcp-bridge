name: Dependency Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 3 AM UTC
    - cron: '0 3 * * *'


jobs:
  go-version:
    uses: ./.github/workflows/_go-version.yml

  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    needs: go-version
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Generate Trivy Report
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          output: 'trivy-report.txt'
          
      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.txt

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: go-version
    steps:
      - uses: actions/checkout@v4
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          vulnerability-check: true
          license-check: true
          allow-licenses: MIT, Apache-2.0, BSD-3-Clause, BSD-2-Clause

  osv-scan:
    name: OSV Scanner
    permissions:
      security-events: write
      contents: read
      actions: read
    uses: google/osv-scanner-action/.github/workflows/osv-scanner-reusable.yml@v2.2.3
    with:
      scan-args: |-
        -r
        --config=.github/config/osv-scanner.toml
        ./

  license-scan:
    name: License Compliance Check
    runs-on: ubuntu-latest
    needs: go-version
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.go-version.outputs.go-version }}

      - name: Install go-license-detector
        run: |
          go install github.com/go-enry/go-license-detector/v4/cmd/license-detector@latest

      - name: Check licenses for Gateway
        run: |
          cd services/gateway
          echo "Detecting licenses in Gateway dependencies..."
          license-detector -f json . > ../../gateway-licenses.json

          # Check for problematic licenses
          if grep -q '"type":"GPL\|LGPL\|AGPL"' ../../gateway-licenses.json; then
            echo "❌ Found GPL-family licenses which may be incompatible"
            cat ../../gateway-licenses.json | jq '.[] | select(.type | contains("GPL"))'
            exit 1
          fi
          echo "✅ No problematic licenses found in Gateway"

      - name: Check licenses for Router
        run: |
          cd services/router
          echo "Detecting licenses in Router dependencies..."
          license-detector -f json . > ../../router-licenses.json

          # Check for problematic licenses
          if grep -q '"type":"GPL\|LGPL\|AGPL"' ../../router-licenses.json; then
            echo "❌ Found GPL-family licenses which may be incompatible"
            cat ../../router-licenses.json | jq '.[] | select(.type | contains("GPL"))'
            exit 1
          fi
          echo "✅ No problematic licenses found in Router"

      - name: Generate human-readable reports
        run: |
          echo "# Gateway License Report" > gateway-licenses.txt
          cat gateway-licenses.json | jq -r '.[] | "\(.name): \(.type)"' >> gateway-licenses.txt

          echo "# Router License Report" > router-licenses.txt
          cat router-licenses.json | jq -r '.[] | "\(.name): \(.type)"' >> router-licenses.txt

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-reports
          path: |
            gateway-licenses.json
            gateway-licenses.txt
            router-licenses.json
            router-licenses.txt