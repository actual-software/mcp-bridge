name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Extract Go version from go.mod (single source of truth)
  go-version:
    uses: ./.github/workflows/_go-version.yml

  changes:
    needs: go-version
    runs-on: ubuntu-latest
    outputs:
      gateway: ${{ steps.changes.outputs.gateway }}
      router: ${{ steps.changes.outputs.router }}
      common: ${{ steps.changes.outputs.common }}
      docs: ${{ steps.changes.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            gateway:
              - 'services/gateway/**'
              - 'pkg/common/**'
              - 'go.mod'
              - 'go.sum'
            router:
              - 'services/router/**'
              - 'pkg/common/**'
              - 'go.mod'
              - 'go.sum'
            common:
              - 'pkg/common/**'
              - 'go.mod'
              - 'go.sum'
            docs:
              - 'docs/**'
              - '*.md'

  lint:
    runs-on: ubuntu-latest
    needs: [go-version, changes]
    if: needs.changes.outputs.gateway == 'true' || needs.changes.outputs.router == 'true' || needs.changes.outputs.common == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.go-version.outputs.go-version }}
      
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          working-directory: .
          args: --timeout=5m

  test-gateway:
    runs-on: ubuntu-latest
    needs: [go-version, changes]
    if: needs.changes.outputs.gateway == 'true' || needs.changes.outputs.common == 'true'
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.go-version.outputs.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-v2-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run Gateway Tests
        working-directory: services/gateway
        env:
          TEST_REDIS_URL: redis://localhost:6379
          CI: true
        run: |
          go test -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload Gateway Coverage
        uses: codecov/codecov-action@v4
        with:
          file: services/gateway/coverage.out
          flags: gateway
          name: gateway-coverage

  test-router:
    runs-on: ubuntu-latest
    needs: [go-version, changes]
    if: needs.changes.outputs.router == 'true' || needs.changes.outputs.common == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.go-version.outputs.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-v2-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run Router Tests
        working-directory: services/router
        env:
          CI: true
        run: |
          go test -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload Router Coverage
        uses: codecov/codecov-action@v4
        with:
          file: services/router/coverage.out
          flags: router
          name: router-coverage

  integration-tests:
    runs-on: ubuntu-latest
    needs: [changes, test-gateway, test-router]
    if: always() && (needs.changes.outputs.gateway == 'true' || needs.changes.outputs.router == 'true' || needs.changes.outputs.common == 'true')
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.go-version.outputs.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-v2-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run Integration Tests
        env:
          TEST_REDIS_URL: redis://localhost:6379
          INTEGRATION_ENABLED: true
          CI: true
        run: |
          # Run cross-service integration tests
          go test -v -tags=integration ./test/integration/...

  security:
    runs-on: ubuntu-latest
    needs: [go-version, changes]
    if: needs.changes.outputs.gateway == 'true' || needs.changes.outputs.router == 'true' || needs.changes.outputs.common == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.go-version.outputs.go-version }}

      - name: Run Gosec Security Scanner
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -fmt sarif -out gosec.sarif ./... || true

      - name: Fix SARIF format
        if: always()
        run: |
          # Remove invalid fixes field from SARIF to avoid validation errors
          if [ -f gosec.sarif ]; then
            python3 -c "
          import json
          import sys

          try:
              with open('gosec.sarif', 'r') as f:
                  data = json.load(f)

              # Remove fixes from all results to avoid validation errors
              for run in data.get('runs', []):
                  for result in run.get('results', []):
                      if 'fixes' in result:
                          del result['fixes']

              with open('gosec.sarif', 'w') as f:
                  json.dump(data, f, indent=2)

              print('SARIF file processed successfully')
          except Exception as e:
              print(f'Error processing SARIF: {e}', file=sys.stderr)
              sys.exit(1)
          " || echo "Failed to process SARIF file"
          fi

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gosec.sarif

  build:
    runs-on: ubuntu-latest
    needs: [go-version, lint, test-gateway, test-router]
    if: always() && needs.lint.result == 'success' && (needs.test-gateway.result == 'success' || needs.test-gateway.result == 'skipped') && (needs.test-router.result == 'success' || needs.test-router.result == 'skipped')
    strategy:
      matrix:
        service: [gateway, router]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.go-version.outputs.go-version }}

      - name: Build ${{ matrix.service }}
        working-directory: services/${{ matrix.service }}
        run: |
          # Create cmd/mcp-${{ matrix.service }} directory structure first
          make build
          
          # Verify the binary was created
          if [ ! -f "bin/mcp-${{ matrix.service }}" ]; then
            echo "❌ Binary not found at bin/mcp-${{ matrix.service }}"
            ls -la bin/
            exit 1
          fi
          
          echo "✅ Successfully built mcp-${{ matrix.service }}"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-binary
          path: services/${{ matrix.service }}/bin/mcp-${{ matrix.service }}

  docker:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [gateway, router]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: services/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}