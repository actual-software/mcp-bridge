name: Build Verification

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]


jobs:
  go-version:
    uses: ./.github/workflows/_go-version.yml

  verify-build-structure:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [gateway, router]
    needs: go-version
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.go-version.outputs.go-version }}

      - name: Verify main.go exists after build
        working-directory: services/${{ matrix.service }}
        run: |
          echo "üîç Checking initial state..."
          ls -la cmd/ || echo "cmd/ directory not found initially"
          
          echo "üèóÔ∏è Running make build..."
          make build
          
          echo "‚úÖ Verifying cmd/mcp-${{ matrix.service }}/main.go exists..."
          if [ ! -f "cmd/mcp-${{ matrix.service }}/main.go" ]; then
            echo "‚ùå main.go not found at cmd/mcp-${{ matrix.service }}/main.go"
            echo "Directory structure after build:"
            find cmd/ -type f -name "*.go" || echo "No Go files found in cmd/"
            exit 1
          fi
          
          echo "‚úÖ Verifying binary was created..."
          if [ ! -f "bin/mcp-${{ matrix.service }}" ]; then
            echo "‚ùå Binary not found at bin/mcp-${{ matrix.service }}"
            ls -la bin/ || echo "bin/ directory not found"
            exit 1
          fi
          
          echo "‚úÖ Build verification passed for ${{ matrix.service }}"
          
      - name: Test binary execution
        working-directory: services/${{ matrix.service }}
        run: |
          echo "üß™ Testing binary execution..."
          ./bin/mcp-${{ matrix.service }} --version || echo "Version flag not available"
          ./bin/mcp-${{ matrix.service }} --help | head -10
          echo "‚úÖ Binary execution test passed"

  verify-cross-compilation:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [gateway, router]
        goos: [linux, darwin]
        goarch: [amd64, arm64]
    needs: go-version
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.go-version.outputs.go-version }}

      - name: Test cross-compilation
        working-directory: services/${{ matrix.service }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          echo "üîß Cross-compiling for ${{ matrix.goos }}/${{ matrix.goarch }}..."
          
          # Use make build first to ensure main.go exists
          make build
          
          # Then cross-compile
          BINARY_NAME="mcp-${{ matrix.service }}-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.service }}" = "router" ]; then
            go build -ldflags="-s -w" -o "${BINARY_NAME}" ./cmd/mcp-router
          else
            go build -ldflags="-s -w" -o "${BINARY_NAME}" ./cmd/mcp-${{ matrix.service }}
          fi
          
          echo "‚úÖ Cross-compilation successful for ${{ matrix.goos }}/${{ matrix.goarch }}"
          ls -la "${BINARY_NAME}"

  verify-make-targets:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [gateway, router]
    needs: go-version
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.go-version.outputs.go-version }}

      - name: Test essential make targets
        working-directory: services/${{ matrix.service }}
        run: |
          echo "üéØ Testing make targets for ${{ matrix.service }}..."
          
          # Test build
          make build
          echo "‚úÖ make build - passed"
          
          # Test clean
          make clean
          echo "‚úÖ make clean - passed"
          
          # Test build again after clean
          make build
          echo "‚úÖ make build (after clean) - passed"
          
          # Test version
          make version
          echo "‚úÖ make version - passed"
          
          echo "üéâ All make targets working correctly"