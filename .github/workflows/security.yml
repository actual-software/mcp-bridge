name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  go-version:
    uses: ./.github/workflows/_go-version.yml

  security-scan:
    runs-on: ubuntu-latest
    needs: go-version
    permissions:
      security-events: write
      contents: read
      actions: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.go-version.outputs.go-version }}

      - name: Run Gosec Security Scanner
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -fmt sarif -out gosec.sarif ./... || true

      - name: Fix SARIF format
        if: always()
        run: |
          # Remove invalid fixes field from SARIF to avoid validation errors
          # gosec sometimes generates fixes that don't conform to SARIF spec
          if [ -f gosec.sarif ]; then
            python3 -c "
          import json
          import sys

          try:
              with open('gosec.sarif', 'r') as f:
                  data = json.load(f)

              # Remove fixes from all results to avoid validation errors
              for run in data.get('runs', []):
                  for result in run.get('results', []):
                      if 'fixes' in result:
                          del result['fixes']

              with open('gosec.sarif', 'w') as f:
                  json.dump(data, f, indent=2)

              print('SARIF file processed successfully')
          except Exception as e:
              print(f'Error processing SARIF: {e}', file=sys.stderr)
              sys.exit(1)
          " || echo "Failed to process SARIF file"
          fi

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gosec.sarif

  dependency-check:
    runs-on: ubuntu-latest
    needs: go-version
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.go-version.outputs.go-version }}

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Check for known vulnerabilities
        run: |
          # Check both services
          cd services/gateway && govulncheck ./...
          cd ../router && govulncheck ./...

  secret-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./

  input-validation-check:
    runs-on: ubuntu-latest
    needs: go-version
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.go-version.outputs.go-version }}

      - name: Verify input validation implementation
        run: |
          echo "üîç Checking input validation coverage..."
          
          # Check for validation functions in gateway
          if [ ! -f "services/gateway/internal/validation/validation.go" ]; then
            echo "‚ùå Gateway validation module not found"
            exit 1
          fi
          
          # Verify key validation functions exist
          grep -q "ValidateNamespace" services/gateway/internal/validation/validation.go || {
            echo "‚ùå ValidateNamespace function not found"
            exit 1
          }
          
          grep -q "ValidateMethod" services/gateway/internal/validation/validation.go || {
            echo "‚ùå ValidateMethod function not found"
            exit 1
          }
          
          grep -q "ValidateToken" services/gateway/internal/validation/validation.go || {
            echo "‚ùå ValidateToken function not found"
            exit 1
          }
          
          echo "‚úÖ Input validation functions present"
          
          # Check that validation is actually used
          if ! grep -r "validation\." services/gateway/internal/ --include="*.go" | grep -v "_test.go" | grep -q "ValidateNamespace\|ValidateMethod\|ValidateToken"; then
            echo "‚ùå Validation functions not being used in production code"
            exit 1
          fi
          
          echo "‚úÖ Input validation is implemented and used"

  security-headers-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check security headers implementation
        run: |
          echo "üîç Checking security headers implementation..."
          
          # Check for security headers in gateway
          if ! grep -r "X-Content-Type-Options\|X-Frame-Options\|Strict-Transport-Security" services/gateway/ --include="*.go"; then
            echo "‚ùå Security headers not found in gateway implementation"
            exit 1
          fi
          
          echo "‚úÖ Security headers implementation found"

  tls-configuration-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Verify TLS configuration
        run: |
          echo "üîç Checking TLS configuration..."
          
          # Check for TLS 1.3 configuration
          if ! grep -r "tls\.VersionTLS13\|MinVersion.*1\.3" services/ --include="*.go"; then
            echo "‚ö†Ô∏è  TLS 1.3 configuration not explicitly found"
          fi
          
          # Check for secure cipher suites
          if ! grep -r "CipherSuites\|PreferServerCipherSuites" services/ --include="*.go"; then
            echo "‚ö†Ô∏è  Cipher suite configuration not explicitly found"
          fi
          
          echo "‚úÖ TLS configuration check completed"

  authentication-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Verify authentication implementation
        run: |
          echo "üîç Checking authentication implementation..."
          
          # Check for JWT validation
          if ! grep -r "jwt\.Parse\|jwt\.Validate" services/gateway/ --include="*.go"; then
            echo "‚ùå JWT validation not found"
            exit 1
          fi
          
          # Check for OAuth2 support
          if ! grep -r "oauth2" services/gateway/ --include="*.go"; then
            echo "‚ö†Ô∏è  OAuth2 support not found"
          fi
          
          # Check for mTLS support
          if ! grep -r "ClientAuth\|VerifyClientCertificate" services/gateway/ --include="*.go"; then
            echo "‚ö†Ô∏è  mTLS support not explicitly found"
          fi
          
          echo "‚úÖ Authentication implementation verified"

  rate-limiting-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Verify rate limiting implementation
        run: |
          echo "üîç Checking rate limiting implementation..."
          
          # Check for rate limiting code
          if ! grep -r "rate.*limit\|RateLimit" services/gateway/ --include="*.go" | grep -v "_test.go"; then
            echo "‚ùå Rate limiting implementation not found"
            exit 1
          fi
          
          # Check for circuit breaker
          if ! grep -r "circuit.*breaker\|CircuitBreaker" services/gateway/ --include="*.go"; then
            echo "‚ùå Circuit breaker implementation not found"
            exit 1
          fi
          
          echo "‚úÖ Rate limiting and circuit breaker implementation verified"