name: Performance Benchmark

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run benchmarks daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  GO_VERSION: '1.21'

jobs:
  benchmark:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Install dependencies
      run: |
        go mod download
        
        # Install benchmarking tools
        go install github.com/benchstat/cmd/benchstat@latest
        
        # Install k6
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Start services
      run: |
        # Start gateway and router in background
        make build
        
        # Start gateway
        ./services/gateway/bin/mcp-gateway \
          --config ./services/gateway/configs/gateway.yaml \
          --log-level error &
        GATEWAY_PID=$!
        
        # Start router
        ./services/router/bin/mcp-router \
          --config ./services/router/configs/router.yaml \
          --log-level error &
        ROUTER_PID=$!
        
        # Save PIDs for cleanup
        echo $GATEWAY_PID > gateway.pid
        echo $ROUTER_PID > router.pid
        
        # Wait for services to be ready
        sleep 10
        
        # Check health
        curl -k -f https://localhost:8443/health || exit 1
        
    - name: Run Go benchmarks
      run: |
        # Run benchmarks and save results
        go test -bench=. -benchmem -benchtime=10s ./... \
          -run=^$ \
          | tee new-benchmarks.txt
          
        # Run CPU profiling benchmarks
        go test -bench=. -benchmem -benchtime=30s \
          -cpuprofile=cpu.prof \
          ./services/gateway/internal/... \
          -run=^$ || true
          
    - name: Run k6 load tests
      run: |
        # Run k6 performance test
        k6 run \
          --out json=k6-results.json \
          --summary-export=k6-summary.json \
          benchmarks/k6/performance-test.js || true
          
    - name: Compare with baseline
      if: github.event_name == 'pull_request'
      run: |
        # Fetch baseline benchmarks from main branch
        git fetch origin main
        git checkout origin/main
        
        # Run baseline benchmarks
        go test -bench=. -benchmem -benchtime=10s ./... \
          -run=^$ \
          | tee old-benchmarks.txt
          
        # Switch back to PR branch
        git checkout -
        
        # Compare results
        benchstat old-benchmarks.txt new-benchmarks.txt | tee comparison.txt
        
        # Check for significant regressions (>10% slower)
        if grep -E "\\+[0-9]{2,}\\.[0-9]+%" comparison.txt; then
          echo "::warning::Performance regression detected"
          exit 1
        fi
        
    - name: Upload results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: |
          new-benchmarks.txt
          old-benchmarks.txt
          comparison.txt
          k6-results.json
          k6-summary.json
          cpu.prof
          
    - name: Store benchmark result
      if: github.ref == 'refs/heads/main'
      uses: benchmark-action/github-action-benchmark@v1
      with:
        name: MCP Bridge Benchmarks
        tool: 'go'
        output-file-path: new-benchmarks.txt
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## ðŸ“Š Performance Benchmark Results\n\n';
          
          // Add comparison results if available
          if (fs.existsSync('comparison.txt')) {
            const comparison = fs.readFileSync('comparison.txt', 'utf8');
            comment += '### Comparison with main branch:\n```\n' + comparison + '\n```\n\n';
          }
          
          // Add k6 summary if available
          if (fs.existsSync('k6-summary.json')) {
            const k6Summary = JSON.parse(fs.readFileSync('k6-summary.json', 'utf8'));
            comment += '### k6 Load Test Results:\n';
            comment += `- **Request Rate**: ${k6Summary.metrics.http_reqs?.rate || 'N/A'} req/s\n`;
            comment += `- **P95 Latency**: ${k6Summary.metrics.http_req_duration?.['p(95)'] || 'N/A'} ms\n`;
            comment += `- **Error Rate**: ${k6Summary.metrics.http_req_failed?.rate || '0'}%\n\n`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
          
    - name: Cleanup
      if: always()
      run: |
        # Stop services
        if [ -f gateway.pid ]; then
          kill $(cat gateway.pid) || true
        fi
        if [ -f router.pid ]; then
          kill $(cat router.pid) || true
        fi